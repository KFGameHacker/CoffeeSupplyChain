// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');
const BigNumber = require('bignumber.js');

contract('SupplyChain', function(accounts) {

    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('1', "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let supplyChain;

    //deploy contract before test
    before(async ()=>{
        supplyChain = await SupplyChain.deployed()
        console.log("\nSupplyChain Contract deployed at: "+supplyChain.address+"\n");
    });

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    it("Testing smart contract function plantItem() that allows a farmer to harvest coffee", async() => {
        let eventEmitted = false;

        //watch the event Planted
        await supplyChain.Planted((err,res)=>{
            eventEmitted = true;
        });

        //mark an item as planted by calling plantItem() function
        let result = await supplyChain.plantItem(upc,originFarmerID,originFarmName,originFarmInformation,originFarmLatitude,originFarmLongitude,productNotes,{from:ownerID});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        //farm info verification
        assert.equal(resultBufferOne['itemUPC'], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne['originFarmName'], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne['originFarmerID'], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne['originFarmInformation'], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne['originFarmLatitude'], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne['originFarmLongitude'], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')       
        
        //item state verification
        assert.equal(resultBufferTwo['itemState'].toString(), 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    });

    it("Testing smart contract function growItem() that allows a farmer to process coffee", async() => {
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        //watch the event Matured
        await supplyChain.Matured((err,res)=>{
            eventEmitted = true;
        });

        // Mark an item as Processed by calling function growItem()
        let result = await supplyChain.growItem(upc,{from:originFarmerID});

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferTwo['itemState'].toString(), 1, 'Error: Invalid item State');
    })

    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Harvested()
        await supplyChain.Harvested((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Harvested by calling function harvestItem()
        //await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        let result = await supplyChain.harvestItem(upc,{from:originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne['itemSKU'], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne['itemUPC'], upc, 'Error: Invalid item UPC')

        //verify the state
        assert.equal(resultBufferTwo['itemState'], 2, 'Error: Invalid item State')

        //verify the event is emitted
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Harvested()
        await supplyChain.Processed((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as processed by calling function processItem()
        let result = await supplyChain.processItem(upc,{from:originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        //verify the state
        assert.equal(resultBufferTwo['itemState'], 3, 'Error: Invalid item State')

        //verify the event is emitted
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Packed()
        await supplyChain.Packed((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Packed by calling function packItem()
        let result = await supplyChain.packItem(upc,{from:originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        //verify the state
        assert.equal(resultBufferTwo['itemState'], 4, 'Error: Invalid item State')

        //verify the event is emitted
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Packed()
        await supplyChain.ForSale((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as ForSale by calling function sellItem()
        let result = await supplyChain.sellItem(upc,productPrice,{from:originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        //verify the state
        assert.equal(resultBufferTwo['itemState'], 5, 'Error: Invalid item State')
        assert.equal(resultBufferTwo['productPrice'], productPrice, 'Error: Invalid item price');

        //verify the event is emitted
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        let refunded = false;

        // Watch the emitted event Packed()
        await supplyChain.Sold((err, res) => {
            eventEmitted = true;
        })

        await supplyChain.Refund((err,res)=>{
            refunded = true;
        });

        // Mark an item as Sold by calling function buyItem()
        let result = await supplyChain.buyItem(upc,{from:distributorID,value:web3.utils.toWei('1.1','ether')});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        //verify the state
        assert.equal(resultBufferTwo['itemState'], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo['distributorID'], distributorID, 'Error: Invalid item State')
        assert.equal(resultBufferOne['ownerID'], distributorID, 'Error: Invalid item State')


        //verify the event is emitted
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        assert.equal(refunded, true, 'Invalid event emitted: overpaid not refunded')
        //assert.equal(refunded, false, 'Invalid event emitted: overpaid refunded')
    })

    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Shipped()
        await supplyChain.Shipped((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as shipped by calling function packshipItemItem()
        let result = await supplyChain.shipItem(upc,{from:originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        //verify the state
        assert.equal(resultBufferTwo['itemState'], 7, 'Error: Invalid item State')

        //verify the event is emitted
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    


    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Received
        await supplyChain.Received((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as shipped by calling function receiveItem
        let result = await supplyChain.receiveItem(upc,{from:retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        //verify the state
        assert.equal(resultBufferTwo['itemState'], 8, 'Error: Invalid item State')
        assert.equal(resultBufferOne['ownerID'], retailerID, 'Error: Invalid item ownerID')
        assert.equal(resultBufferTwo['retailerID'], retailerID, 'Error: Invalid item retailerID')

        //verify the event is emitted
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })  


    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Purchased
        await supplyChain.Purchased((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as shipped by calling function packshipItemItem()
        let result = await supplyChain.purchaseItem(upc,{from:consumerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        //verify the state
        assert.equal(resultBufferTwo['itemState'], 9, 'Error: Invalid item State')
        assert.equal(resultBufferOne['ownerID'], consumerID, 'Error: Invalid item ownerID')
        assert.equal(resultBufferTwo['consumerID'], consumerID, 'Error: Invalid item consumerID')

        //verify the event is emitted
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })  


    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
       
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne['itemSKU'],sku,'Error: Invalid item sku');
        assert.equal(resultBufferOne['itemUPC'],upc,'Error: Invalid item upc');
        assert.equal(resultBufferOne['ownerID'],consumerID,'Error: Invalid item ownerID');
        assert.equal(resultBufferOne['originFarmerID'],originFarmerID,'Error: Invalid item originFarmerID');
        assert.equal(resultBufferOne['originFarmName'],originFarmName,'Error: Invalid item originFarmName');
        assert.equal(resultBufferOne['originFarmInformation'],originFarmInformation,'Error: Invalid item originFarmInformation');
        assert.equal(resultBufferOne['originFarmLatitude'],originFarmLatitude,'Error: Invalid item originFarmLatitude');
        assert.equal(resultBufferOne['originFarmLongitude'],originFarmLongitude,'Error: Invalid item originFarmLongitude');
    })


    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferTwo['itemSKU'],sku,'Error: Invalid item sku');
        assert.equal(resultBufferTwo['itemUPC'],upc,'Error: Invalid item upc');
        assert.equal(resultBufferTwo['productID'],productID,'Error: Invalid item productID');
        assert.equal(resultBufferTwo['productNotes'],productNotes,'Error: Invalid item productNotes');
        assert.equal(resultBufferTwo['productPrice'],productPrice,'Error: Invalid item productPrice');
        assert.equal(resultBufferTwo['itemState'],9,'Error: Invalid item state');
        assert.equal(resultBufferTwo['distributorID'],distributorID,'Error: Invalid item distributorID');
        assert.equal(resultBufferTwo['retailerID'],retailerID,'Error: Invalid item retailerID');
        assert.equal(resultBufferTwo['consumerID'],consumerID,'Error: Invalid item consumerID');
    })

});

